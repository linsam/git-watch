#!/usr/bin/env python

# git-watch - View ahead/behind status to a number of "watched" branches.
#
# Copyright (C) 2015 John O'Meara <john.fr.omeara@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as published
# by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to teh Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

from subprocess import *
import sys


def valOrExit(args):
    t = Popen(args, stdout=PIPE)
    ret = t.wait()
    if ret != 0:
        sys.exit(ret)
    return t.stdout.read().strip()

def statval(args):
    t = Popen(args, stdout=PIPE)
    ret = t.wait()
    return ret, t.stdout.read().strip()

def config(name):
    ret, val = statval(["git", "config", "--get-all", name])
    if ret != 0:
        return None
    return val

def doStatus(localBranch, remoteBranch):
    """Based on stat_tracking_info from remote.c of the git distribution"""
    #print "Comparing our %s to %s's %s" % (localBranch, remote, remoteBranch)
    handle = Popen(["git", "rev-list", "--left-right", "%s...%s" % (localBranch, remoteBranch), "--"], stdout=PIPE)
    ours = 0
    theirs = 0
    for line in handle.stdout:
        if line[0] == ">":
            theirs += 1
        elif line[0] == "<":
            ours += 1
        else:
            raise Exception("Unexpected line '%s'" % line)
    res = handle.wait()
    if ours and not theirs:
        print "You are ahead of '%s' by %i commits" % (remoteBranch, ours)
    elif theirs and not ours:
        print "You are behind '%s' by %i commits" % (remoteBranch, theirs)
    elif ours and theirs:
        print "You have diverged from '%s'. Ahead %i, behind %i" % (remoteBranch, ours, theirs)
    else:
        print "No difference to '%s'" % (remoteBranch)
    return res

def main():
    branch = valOrExit(["git", "symbolic-ref", "HEAD"])
    #print "Branch is",branch
    if not branch.startswith("refs/heads/"):
        print "Not a local head"
        sys.exit(1)
    branch = branch[11:]
    print "Branch is", branch
    remote = config("branch.%s.remote" % branch)
    merge = config("branch.%s.merge" % branch)
    watch = config("branch.%s.watch" % branch)
    other = config("branch.%s.other" % branch)
    #print "Remote",remote
    #print "Merge",merge
    #print "Watch",watch
    if remote and merge:
        for m in merge.split():
            if not m.startswith("refs/heads/"):
                print "confused by '%s', skipping" % m
                continue
            m = m[11:]
            # TODO: How do we know that the merge branch is stored in
            #    refs/remotes/${remote}/${merge##refs/heads/}
            # ? How does git resolve this?
            doStatus(branch, "%s/%s" % (remote, m))
    if watch:
        for w in watch.split():
            doStatus(branch, w)




if __name__ == "__main__":
    main()
